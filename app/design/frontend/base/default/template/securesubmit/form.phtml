<?php /* @var $this Hps_Securesubmit_Block_Form */
$_code = $this->getMethodCode();
$public_key = Mage::getModel('hps_securesubmit/payment')->getConfigData('publicapikey');
$allow_card_saving = (bool)Mage::getModel('hps_securesubmit/payment')->getConfigData('allow_card_saving');
$_loggedIn = Mage::getSingleton('customer/session')->isLoggedIn();
if ($_loggedIn && $allow_card_saving) {
    $customerStoredCards = Mage::helper('hps_securesubmit')->getStoredCards( Mage::getSingleton('customer/session')->getCustomerId());
}
?>
<ul class="form-list" id="payment_form_<?php echo $_code ?>" style="display:none">
    <?php if($_loggedIn && $allow_card_saving && count($customerStoredCards)): ?>
    <li>
        <label for="<?php echo $_code ?>_stored_card_checkbox"><?php echo $this->__('Use a stored card') ?></label>
        <div class="input-box">
            <input type="checkbox" id="<?php echo $_code ?>_stored_card_checkbox" />
        </div>
    </li>
    <li id="<?php echo $_code ?>_stored_cards" style="display: none">
        <label for="<?php echo $_code ?>_stored_card_select"><?php echo $this->__('Stored Card') ?></label>
        <div class="input-box">
            <select id="<?php echo $_code ?>_stored_card_select"  autocomplete="off">
            <?php foreach ($customerStoredCards as $key => $card): ?>
                <option value="<?php echo $card->getId() ?>"><?php echo $card->getCcType().' ************'.$card->getCcLast4().' ('.$card->getCcExpMonth().'/'.$card->getCcExpYear().')' ?></option>
            <?php endforeach ?>
            </select>
        </div>
    </li>
    <?php endif ?>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_number"><?php echo $this->__('Credit Card Number') ?> <span class="required">*</span></label>
        <div class="input-box">
            <input type="text" id="<?php echo $_code ?>_cc_number" title="<?php echo $this->__('Credit Card Number') ?>" class="input-text validate-cc-number validate-cc-type" value="" autocomplete="off" />
            <input type="hidden" id="<?php echo $_code ?>_token" name="payment[securesubmit_token]" value="">
            <input type="hidden" id="<?php echo $_code ?>_cc_last_four" name="payment[cc_last_four]" value="">
        </div>
    </li>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_expiration"><?php echo $this->__('Expiration Date') ?> <span class="required">*</span></label>
        <div class="input-box">
            <div class="v-fix">
                <select id="<?php echo $_code ?>_expiration" name="payment[cc_exp_month]" class="month required-entry validate-cc-exp"  autocomplete="off">
                <?php $_ccExpMonth = $this->getInfoData('cc_exp_month') ?>
                <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>" <?php if($k==$_ccExpMonth): ?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
            </div>
            <div class="v-fix">
                <select id="<?php echo $_code ?>_expiration_yr" name="payment[cc_exp_year]" class="year required-entry"  autocomplete="off">
                <?php foreach ($this->getCcYears() as $k=>$v): ?>
                    <option value="<?php echo $k?$k:'' ?>" <?php if($k==$this->getInfoData('cc_exp_year')):?> selected="selected"<?php endif ?>><?php echo $v ?></option>
                <?php endforeach ?>
                </select>
            </div>
        </div>
    </li>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_cid"><?php echo $this->__('Card Verification Number') ?> <span class="required">*</span></label>
        <div class="input-box">
            <div class="v-fix">
                <input type="text" title="<?php echo $this->__('Card Verification Number') ?>" class="cvv required-entry input-text validate-cc-cvn" id="<?php echo $_code ?>_cc_cid" value="" autocomplete="off" />
            </div>
            <a href="#" class="cvv-what-is-this"><?php echo $this->__('What is this?') ?></a>
        </div>
    </li>
    <?php if ($_loggedIn && $allow_card_saving && $public_key): ?>
    <li class="stored_cards_selected">
        <label for="<?php echo $_code ?>_cc_save_future"><?php echo $this->__('Save this card for future use?') ?></label>
        <div class="input-box">
            <input type="checkbox" id="<?php echo $_code ?>_cc_save_future" name="payment[cc_save_future]" value="Y" autocomplete="off" />
        </div>
    </li>
    <?php endif ?>
</ul>
<script type="text/javascript">
//<![CDATA[
<?php if($_loggedIn && $allow_card_saving && count($customerStoredCards)): ?>
    $('<?php echo $_code ?>_stored_card_checkbox').observe('click',function() {
        $$('.stored_cards_selected').invoke('toggle');
        $('<?php echo $_code ?>_stored_cards').toggle();
        $('<?php echo $_code ?>_cc_number').toggleClassName('validate-cc-number');
    });
<?php endif ?>


if (typeof Payment != "undefined") {
    if (typeof Payment.prototype._secureSubmitOldSave === 'undefined') {
        var oldPayment = Object.clone(Payment.prototype);
        Payment.prototype._secureSubmitOldSave = oldPayment.save;
    }
    Object.extend(Payment.prototype, {
        save: function() {
            if (this.currentMethod != 'hps_securesubmit') {
                this._secureSubmitOldSave();
                return;
            }

            if (checkout.loadWaiting != false) return;

            // Use stored card checked, get existing token data
            if (this.secureSubmitUseStoredCard()) {
                var storedcardId = $('hps_securesubmit_stored_card_select').value;
                checkout.setLoadWaiting('payment');
                new Ajax.Request(this.secureSubmitGetTokenDataUrl, {
                    method: 'post',
                    parameters: {storedcard_id: storedcardId},
                    onSuccess: function(response) {
                        var data = response.responseJSON;
                        if (data && data.token) {
                            $('hps_securesubmit_expiration').value = parseInt(data.token.cc_exp_month);
                            $('hps_securesubmit_expiration_yr').value = data.token.cc_exp_year;
                        }
                        this.secureSubmitResponseHandler({
                            token_value:  data.token.token_value,
                            token_type:   null, // 'supt'?
                            token_expire: new Date().toISOString(),
                            card:         {
                                number: data.token.cc_last4
                            }
                        });
                    }.bind(this),
                    onFailure: function() {
                        alert('Unknown error. Please try again.');
                        checkout.setLoadWaiting(false);
                    }
                });
            }
            // Use stored card not checked, get new token
            else {
                var validator = new Validation(this.form);
                if (this.validate() && validator.validate()) {
                    checkout.setLoadWaiting('payment');

                    hps.tokenize({
                        data: {
                            public_key: this.secureSubmitPublicKey,
                            number: $('hps_securesubmit_cc_number').value,
                            cvc: $('hps_securesubmit_cc_cid').value,
                            exp_month: $('hps_securesubmit_expiration').value,
                            exp_year: $('hps_securesubmit_expiration_yr').value
                        },
                        success: this.secureSubmitResponseHandler.bind(this),
                        error: this.secureSubmitResponseHandler.bind(this)
                    });
                }
            }
        },
        secureSubmitUseStoredCard: function () {
            var storedCheckbox = $('hps_securesubmit_stored_card_checkbox');
            return storedCheckbox && storedCheckbox.checked;
        },
        secureSubmitResponseHandler: function (response) {
            var tokenField = $('hps_securesubmit_token'),
                lastFourField = $('hps_securesubmit_cc_last_four');
            tokenField.value = lastFourField.value = null;

            if (response && response.error) {
                if (response.message) {
                    alert(response.message);
                }
                checkout.setLoadWaiting(false);
            } else if (response && response.token_value) {
                tokenField.value = response.token_value;
                lastFourField.value = response.card.number.substr(-4);

                // Continue Magento checkout steps
                new Ajax.Request(this.saveUrl, {
                    method:'post',
                    onComplete: this.onComplete,
                    onSuccess: this.onSave,
                    onFailure: checkout.ajaxFailure.bind(checkout),
                    parameters: Form.serialize(this.form)
                });
            } else {
                alert('Unexpected error.')
            }
        }
    });

    payment.secureSubmitPublicKey = '<?php echo $public_key ?>';
    payment.secureSubmitGetTokenDataUrl = '<?php echo Mage::getUrl('securesubmit/storedcard/getTokenData', array('_secure' => TRUE)) ?>';
}

if (typeof OPC != "undefined") {
    if (typeof OPC.prototype._secureSubmitOldSubmit === 'undefined') {
        var oldOPC = Object.clone(OPC.prototype);
        OPC.prototype._secureSubmitOldSubmit = oldOPC.submit;
    }
    Object.extend(OPC.prototype, {
        save: function() {
            if (this.sectionsToValidate[0].currentMethod != 'hps_securesubmit') {
                this._secureSubmitOldSubmit();
                return;
            }
            hps.tokenize({
                data: {
                    public_key: this.secureSubmitPublicKey,
                    number: $('hps_securesubmit_cc_number').value,
                    cvc: $('hps_securesubmit_cc_cid').value,
                    exp_month: $('hps_securesubmit_expiration').value,
                    exp_year: $('hps_securesubmit_expiration_yr').value
                },
                success: this.secureSubmitResponseHandler.bind(this),
                error: this.secureSubmitResponseHandler.bind(this)
            });
        },
        secureSubmitResponseHandler: function (response) {
            var tokenField = $('hps_securesubmit_token'),
                lastFourField = $('hps_securesubmit_cc_last_four');
            tokenField.value = lastFourField.value = null;

            if (response && response.error) {
                if (response.message) {
                    alert(response.message);
                }
                checkout.setLoadWaiting(false);
            } else if (response && response.token_value) {
                tokenField.value = response.token_value;
                lastFourField.value = response.card.number.substr(-4);

                this.setLoadWaiting(true);
                var params = Form.serialize(this.form);
                var request = new Ajax.Request(this.saveUrl, {
                    method: 'post',
                    parameters: params,
                    onSuccess: this.setResponse.bind(this),
                    onFailure: this.ajaxFailure.bind(this)
                });;
            } else {
                alert('Unexpected error.')
            }
        }
    });

    OPC.prototype.secureSubmitPublicKey = '<?php echo $public_key ?>';
    OPC.prototype.secureSubmitGetTokenDataUrl = '<?php echo Mage::getUrl('securesubmit/storedcard/getTokenData', array('_secure' => TRUE)) ?>';
}


//]]>
</script>
